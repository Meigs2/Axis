@page "/sensorchart"
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="container h-full w-full">
    <svg id="chart">
    </svg>
</div>

<button @onclick="StartSimulation">Start Simulation</button>
<button @onclick="StopSimulation">Stop Simulation</button>

@code {
    private IJSObjectReference module;
    private System.Timers.Timer timer;
    private IJSInProcessObjectReference chart;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/D3Chart.js");

            var configurations = new[] {
                new { Range = new[] {50, 100} }, // For temperature
                new { Range = new[] {0, 12} }, // For pressure
                new { Range = new[] {0, 100} } // For weight
            };
            
            //chart = await module.InvokeAsync<IJSInProcessObjectReference>("newChart", ".container", 300, configurations);
        }
    }

    private void StartSimulation()
    {
        timer = new System.Timers.Timer();
        timer.Interval = 2000; // 2 seconds
        timer.Elapsed += TimerElapsed;
        timer.Start();
    }

    private void StopSimulation()
    {
        timer?.Stop();
    }

    private async void TimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        // Generate random values for temperature, pressure, and weight
        var rand = new Random();
        var temperature = rand.Next(50, 100);
        var pressure = rand.Next(0, 12);
        var weight = rand.Next(0, 100);
        var timestamp = DateTime.Now.Ticks;

        var values = new[] { temperature, pressure, weight };
        await chart.InvokeVoidAsync("addMultiData", values, timestamp);
    }

    public void Dispose()
    {
        module?.DisposeAsync();
        timer?.Dispose();
    }

}
